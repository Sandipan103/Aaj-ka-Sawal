// approach -> 1
// T.C  O(N)
// S>C  O(1)
void sortColors(vector<int>& nums) {
        int s = 0, mid = 0, e = nums.size() - 1;
        while(mid <= e)  {
            if(nums[mid] == 0)  swap(nums[mid++], nums[s++]);
            else if(nums[mid] == 2)   swap(nums[mid], nums[e--]);
            else mid++;
        }
    }


// approach -> 2
// T.C  O(N) + O(N)   
// S>C  O(1)
void sortColors(vector<int>& nums) {
        int h[3] = {0};
        for(int i=0; i<nums.size(); i++)
        h[nums[i]]++;
        for(int i=0; i<nums.size(); i++)    {
            if(i < h[0])    nums[i] = 0;
            else if(i < h[0] + h[1])    nums[i] = 1;
            else    nums[i] = 2;
        }
    }



// approach -> 3
// T.C  O(N) + O(N)
// S>C  O(1)
void sortColors(vector<int>& nums) {
        int s = 0, e = nums.size() - 1;
        for(int i=0; i<nums.size(); i++)    {
            if(nums[i] == 0)    {
                swap(nums[s++], nums[i]);
            }
        }
        for(int i=0; i<e;)    {
            if(nums[i] == 2)    {
                swap(nums[e--], nums[i]);
            }
            else i++;
        }
    }
